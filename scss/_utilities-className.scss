@use 'sass:math';

// utilities map
$utilities: (
    'font-size': (
        'prefix': 'font',
        'values': (
            'default': $base-font-size,
            'xxsm': $font-size-xxsm,
            'xsm': $font-size-xsm,
            'sm': $font-size-sm,
            'm': $font-size-m,
            'lg': $font-size-lg,
            'xl': $font-size-xl,
            'xxl': $font-size-xxl
        )
    ),

    'font-weight': (
        'prefix': 'font-weight',
        'values': (
            'r': $font-weight-regular,
            'l': $font-weight-light,
            'b': $font-weight-bold
        )
    ),

    'display': (
        'prefix': 'display',
        'values': (
            'n': none,
            'b': block,
            'f': flex,
            'i': inline,
            'i-b': inline-block
        )
    ),

    'flex-direction': (
        'prefix': 'flex-direction',
        'values': (
            'r': row,
            'r-r': row-reverse,
            'c': column,
            'c-r': column-reverse,
        )
    ),

    'justify-content': (
        'prefix': 'justify-content',
        'values': (
            'c': center,
            's-b': space-between,
            's-a': space-around,
            's-e': space-evenly,
            's': start,
            'e': end,
            'l': left,
            'r': right
        )
    ),

    'align-items': (
        'prefix': 'align-items',
        'values': (
            'c': center,
            's': start,
            'e': end,
            'f-s': flex-start,
            'f-e': flex-end,
            'b-l': baseline
        )
    ),

    'align-self': (
        'prefix': 'align-self',
        'values': (
            'c': center,
            's': start,
            'e': end,
            'f-s': flex-start,
            'f-e': flex-end,
            'b-l': baseline
        )
    ),

    'padding': (
        'prefix': 'padding',
        'values': (
            'default': $base-padding,
            '1': $base-padding * 1.5,
            '2': $base-padding * 2,
            '3': $base-padding * 4,
            '4': $base-padding * 6,
            '5': $base-padding * 8
        )
    ),

    'padding-top': (
        'prefix': 'padding-top',
        'values': (
            'default': $base-padding,
            '1': $base-padding * 1.5,
            '2': $base-padding * 2,
            '3': $base-padding * 4,
            '4': $base-padding * 6,
            '5': $base-padding * 8
        )
    ),

    'padding-bottom': (
        'prefix': 'padding-bottom',
        'values': (
            'default': $base-padding,
            '1': $base-padding * 1.5,
            '2': $base-padding * 2,
            '3': $base-padding * 4,
            '4': $base-padding * 6,
            '5': $base-padding * 8
        )
    ),

    'padding-left': (
        'prefix': 'padding-left',
        'values': (
            'default': $base-padding,
            '1': $base-padding * 1.5,
            '2': $base-padding * 2,
            '3': $base-padding * 4,
            '4': $base-padding * 6,
            '5': $base-padding * 8
        )
    ),

    'padding-right': (
        'prefix': 'padding-right',
        'values': (
            'default': $base-padding,
            '1': $base-padding * 1.5,
            '2': $base-padding * 2,
            '3': $base-padding * 4,
            '4': $base-padding * 6,
            '5': $base-padding * 8
        )
    ),
    
    'margin-top': (
        'prefix': 'margin-top',
        'values': (
            '0': $base-margin-top,
            '1': $base-margin-top * 1.5,
            '2': $base-margin-top * 2,
            '3': $base-margin-top * 4,
            '4': $base-margin-top * 6,
            '5': $base-margin-top * 8
        )
    ),
    
    'margin-bottom': (
        'prefix': 'margin-bottom',
        'values': (
            'default': $base-margin-bottom,
            '1': $base-margin-bottom * 1.5,
            '2': $base-margin-bottom * 2,
            '3': $base-margin-bottom * 4,
            '4': $base-margin-bottom * 6,
            '5': $base-margin-bottom * 8
        )
    ),

    'border-radius': (
        'prefix': 'border-radius',
        'values': (
            'default': $base-border-radius,
            '1': $base-border-radius * 1.5,
            '2': $base-border-radius * 2,
            '3': $base-border-radius * 4,
            '4': $base-border-radius * 6,
            '5': $base-border-radius * 8
        )
    ),
    
    'border-width': (
        'prefix': 'border-width',
        'values': (
            'default': $base-border-width,
            '1': $base-border-width * 1.5,
            '2': $base-border-width * 2,
            '3': $base-border-width * 4,
            '4': $base-border-width * 6,
            '5': $base-border-width * 8
        )
    ),
    
    'border-style': (
        'prefix': 'border-style',
        'values': (
            'n': none,
            's': solid,
            'd': dotted
        )
    ),

    'gap': (
        'prefix': 'gap',
        'values': (
            '0': 5px,
            '1': 10px,
            '2': 15px,
            '3': 20px,
            '4': 25px,
            '5': 30px
        ),
    ),
    
    'width': (
        'prefix': 'width',
        'values': (
            '1': 10%,
            '2': 20%,
            '3': 30%,
            '4': 40%,
            '5': 50%,
            '6': 60%,
            '7': 70%,
            '8': 80%,
            '9': 90%
        )
    )
);

// generate utilities classnames
@each $property, $map in $utilities {               // for each property map in utilities (exsample property: font-size)
    $prefix: map-get($map, 'prefix' );              // key for each map (exsample font)
    $values: map-get($map, 'values' );              // val for each map (exsample sm)

    @each $key, $val in $values {
        @if($key == 'default') {
            .#{$prefix} {                           // .font
                #{$property}: $val;                 // font-size: $base-font-size 
            }
        } @else {
            .#{$prefix}-#{$key} {                   // .prefixValue-valuesKey = css selector = .font-sm
                #{$property}: $val;                 // property: valuesKeyValue; = font-size: $font-size-sm;
            }
        }
    }
}